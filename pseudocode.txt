A* Algorithim Pseudocode

START
	create openlist containing first node with its g set to 0
	create closedlist which is empty
	WHILE openlist is not empty
		set currentnode to first in openlist
		FOR each node in openlist
			IF the f(node) less than f(currentnode) THEN
				set currentnode to node
			ENDIF
		ENDFOR
		add currentnode to closedlist
		remove currentnode from openlist
		FOR each adjacent node to currentnode
			set adjacent node's parent to currentnode
			IF node is goal node THEN
				create pathlist containing node
				WHILE g of last node in pathlist doesn't equal 0
					add last node in pathlist's parent to pathlist
				ENDWHILE
				reverse pathlist
				RETURN pathlist
			ENDIF
			IF node is a wall or node in closedlist THEN
				go to next iteration of for loop
			ENDIF
			IF node is not in openlist THEN
				add node to openlist
			ELSE
				IF g(node) is less than g(node in openlist) THEN
					set node in openlist parent to currentnode
				ENDIF
			ENDIF
		ENDFOR
	ENDWHILE
END
			

FUNCTION h(node)
	RETURN absolute of (x of node - x of goal node) + absolute of (y of node - y of goal node)
ENDFUNCTION

FUNCTION g(node)
	RETURN g(parent of node) + 1
ENDFUNCTION

FUNCTION f(node)
	RETURN h(node) + g(node)
ENDFUNCTION
